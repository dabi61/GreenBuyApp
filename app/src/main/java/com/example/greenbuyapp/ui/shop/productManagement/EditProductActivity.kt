package com.example.greenbuyapp.ui.shop.productManagement

import android.content.Context
import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.view.View
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import androidx.lifecycle.ViewModel
import com.example.greenbuyapp.R
import com.example.greenbuyapp.data.product.model.Product
import com.example.greenbuyapp.databinding.ActivityEditProductBinding
import com.example.greenbuyapp.databinding.ActivityProductManagementBinding
import com.example.greenbuyapp.databinding.ActivityProductVariantBinding
import com.example.greenbuyapp.ui.base.BaseActivity
import org.koin.androidx.viewmodel.ext.android.viewModel
import androidx.activity.result.PickVisualMediaRequest
import androidx.core.net.toUri
import com.example.greenbuyapp.data.category.model.SubCategory
import com.example.greenbuyapp.ui.shop.addProduct.SubCategoryAdapter
import com.example.greenbuyapp.util.ImageTransform
import com.example.greenbuyapp.util.loadUrl
import com.example.greenbuyapp.domain.category.CategoryRepository
import kotlinx.coroutines.launch
import org.koin.android.ext.android.inject
import androidx.lifecycle.lifecycleScope
import com.example.greenbuyapp.ui.shop.addProduct.AddProductViewModel
import com.example.greenbuyapp.util.Result
import com.example.greenbuyapp.ui.shop.addProduct.AddProductUiState


class EditProductActivity : BaseActivity<ActivityEditProductBinding>() {


    override val viewModel: AddProductViewModel by viewModel()


    override val binding: ActivityEditProductBinding by lazy {
        ActivityEditProductBinding.inflate(layoutInflater)
    }

    private var selectedCoverUri: Uri? = null
    private var selectedSubCategory: SubCategory? = null
    private lateinit var subCategoryAdapter: SubCategoryAdapter
    private lateinit var currentProduct: Product
    private var hasSelectedNewImage = false

    // Photo picker launcher
    private val photoPicker = registerForActivityResult(
        ActivityResultContracts.PickVisualMedia()
    ) { uri ->
        handleSelectedCoverImage(uri)
    }

    private val categoryRepository: CategoryRepository by inject()

    private fun handleSelectedCoverImage(uri: Uri?) {
        if (uri != null) {
            selectedCoverUri = uri
            // ‚úÖ ƒê√°nh d·∫•u user ƒë√£ ch·ªçn ·∫£nh m·ªõi
            hasSelectedNewImage = true

            // Hi·ªÉn th·ªã ·∫£nh preview
            binding.ivCoverPreview.loadUrl(
                imageUrl = uri.toString(),
                placeholder = R.drawable.pic_item_product,
                error = R.drawable.pic_item_product,
                transform = ImageTransform.ROUNDED
            )

            binding.ivCoverPreview.visibility = View.VISIBLE
            binding.llAddCover.visibility = View.GONE

            println("üì∏ Cover image selected: $uri")
            Toast.makeText(this, "‚úÖ ƒê√£ ch·ªçn ·∫£nh cover", Toast.LENGTH_SHORT).show()
        } else {
            println("‚ùå No cover image selected")
            Toast.makeText(this, "‚ùå Kh√¥ng ch·ªçn ·∫£nh n√†o", Toast.LENGTH_SHORT).show()
        }
    }

    companion object {

        private const val EXTRA_PRODUCT = "extra_product"

        fun createIntent(context: Context, product: Product): Intent {
            return Intent(context, EditProductActivity::class.java).apply {
                putExtra(EXTRA_PRODUCT, product)
            }
        }
    }


    override fun onCreate(savedInstanceState: Bundle?) {
        setContentView(binding.root)
        
        // ‚úÖ Kh·ªüi t·∫°o currentProduct TR∆Ø·ªöC super.onCreate()
        val product = intent.getParcelableExtra<Product>(EXTRA_PRODUCT)
        if (product == null) {
            finish()
            return
        }
        currentProduct = product
        // ‚úÖ KH√îNG set selectedCoverUri t·ª´ URL string n·ªØa
        selectedCoverUri = null // B·∫Øt ƒë·∫ßu v·ªõi null, ch·ªâ set khi user ch·ªçn ·∫£nh m·ªõi
        
        // ‚úÖ B√¢y gi·ªù m·ªõi g·ªçi super.onCreate() - initViews() s·∫Ω c√≥ currentProduct
        super.onCreate(savedInstanceState)
        
        // ‚úÖ Logic ri√™ng sau khi BaseActivity setup xong
        populateProduct(product)
    }


    /** ƒê·ªï d·ªØ li·ªáu s·∫£n ph·∫©m l√™n UI */
    private fun populateProduct(product: Product) {
        // ‚úÖ Hi·ªÉn th·ªã d·ªØ li·ªáu text
        binding.etName.setText(product.name)
        binding.etDescription.setText(product.description)
        binding.etPrice.setText(product.price.toString())
        
        // ‚úÖ Hi·ªÉn th·ªã ·∫£nh cover
        val imageUrl = if (!product.cover.isNullOrEmpty()) {
            if (product.cover.startsWith("http")) product.cover else "https://www.utt-school.site${product.cover}"
        } else null
        
        if (imageUrl != null) {
            binding.ivCoverPreview.loadUrl(
                imageUrl = imageUrl,
                placeholder = R.drawable.pic_item_product,
                error = R.drawable.pic_item_product,
                transform = ImageTransform.ROUNDED
            )
            // ‚úÖ Hi·ªÉn th·ªã ·∫£nh, ·∫©n placeholder
            binding.ivCoverPreview.visibility = View.VISIBLE
            binding.llAddCover.visibility = View.GONE
        } else {
            // ‚úÖ Kh√¥ng c√≥ ·∫£nh, hi·ªÉn th·ªã placeholder
            binding.ivCoverPreview.visibility = View.GONE
            binding.llAddCover.visibility = View.VISIBLE
        }
    }


    /** Thi·∫øt l·∫≠p toolbar */
    private fun setupToolbar() {
        binding.toolbar.setNavigationOnClickListener {
            finish()
        }
    }

    override fun initViews() {
        setupToolbar()
        setupCoverImagePicker()
        setupSubCategoryDropdown()
        setupNextButton()
    }

    private fun setupCoverImagePicker() {
        binding.cvCoverImage.setOnClickListener {
            openPhotoPicker()
        }
    }

    private fun setupNextButton() {
        binding.btnNext.setOnClickListener {
            editProduct()
        }
    }

    private fun editProduct() {
        val name = binding.etName.text.toString().trim()
        val description = binding.etDescription.text.toString().trim()
        val priceText = binding.etPrice.text.toString().trim()

        // Validation
        when {
            name.isEmpty() -> {
                binding.etName.error = "Vui l√≤ng nh·∫≠p t√™n s·∫£n ph·∫©m"
                return
            }
            description.isEmpty() -> {
                binding.etDescription.error = "Vui l√≤ng nh·∫≠p m√¥ t·∫£ s·∫£n ph·∫©m"
                return
            }
            priceText.isEmpty() -> {
                binding.etPrice.error = "Vui l√≤ng nh·∫≠p gi√° s·∫£n ph·∫©m"
                return
            }
            selectedSubCategory == null -> {
                binding.tilSubCategory.error = "Vui l√≤ng ch·ªçn danh m·ª•c con"
                return
            }
            // ‚úÖ Ch·ªâ y√™u c·∫ßu ·∫£nh m·ªõi n·∫øu s·∫£n ph·∫©m ch∆∞a c√≥ ·∫£nh c≈© HO·∫∂C user mu·ªën thay ƒë·ªïi
            selectedCoverUri == null && currentProduct.cover.isNullOrEmpty() -> {
                Toast.makeText(this, "Vui l√≤ng ch·ªçn ·∫£nh cover cho s·∫£n ph·∫©m", Toast.LENGTH_SHORT).show()
                return
            }
        }

        // Clear error if validation passes
        binding.tilSubCategory.error = null

        // Parse numbers
        val price = try {
            priceText.toDouble()
        } catch (e: NumberFormatException) {
            binding.etPrice.error = "Gi√° ph·∫£i l√† s·ªë h·ª£p l·ªá"
            return
        }

        val subCategoryId = selectedSubCategory!!.id

        // ‚úÖ Ph√¢n bi·ªát 2 tr∆∞·ªùng h·ª£p: c√≥ ·∫£nh m·ªõi ho·∫∑c ch·ªâ edit text
        if (hasSelectedNewImage && selectedCoverUri != null) {
            // User ƒë√£ ch·ªçn ·∫£nh m·ªõi - g·ªçi editProduct v·ªõi ·∫£nh
            viewModel.editProduct(
                context = this,
                productId = currentProduct.product_id,
                name = name,
                description = description,
                price = price,
                subCategoryId = subCategoryId,
                coverUri = selectedCoverUri!!
            )
            println("üè≠ Editing product with new image: $name, price: $price, subCategoryId: $subCategoryId")
        } else {
            // User kh√¥ng ch·ªçn ·∫£nh m·ªõi - ch·ªâ edit text fields
            viewModel.editProductWithoutNewImage(
                productId = currentProduct.product_id,
                name = name,
                description = description,
                price = price,
                subCategoryId = subCategoryId
            )
            println("üè≠ Editing product without new image: $name, price: $price, subCategoryId: $subCategoryId")
        }
    }

    private fun openPhotoPicker() {
        photoPicker.launch(
            PickVisualMediaRequest(ActivityResultContracts.PickVisualMedia.ImageOnly)
        )
    }

    private fun setupSubCategoryDropdown() {
        // Kh·ªüi t·∫°o adapter r·ªóng ban ƒë·∫ßu
        subCategoryAdapter = SubCategoryAdapter(this, emptyList())
        binding.etSubCategory.setAdapter(subCategoryAdapter)

        // X·ª≠ l√Ω khi user ch·ªçn m·ªôt subcategory kh√°c
        binding.etSubCategory.setOnItemClickListener { _, _, position, _ ->
            val selectedSubCat = subCategoryAdapter.getItem(position)
            selectedSubCategory = selectedSubCat
            selectedSubCat?.let {
                // Set the display text to subcategory name
                binding.etSubCategory.setText(it.name, false)

                // Clear any previous error
                binding.tilSubCategory.error = null

                // Update ViewModel
                viewModel.selectSubCategory(it)
                println("üìÇ User selected subcategory: ${it.name} (ID: ${it.id})")
            }
        }

        // M·ªü dropdown khi b·∫•m icon
        binding.tilSubCategory.setEndIconOnClickListener {
            binding.etSubCategory.showDropDown()
        }

        // T·∫£i danh s√°ch subcategory
        viewModel.loadSubCategories()
    }

    override fun observeViewModel() {
        lifecycleScope.launch {
            viewModel.subCategories.collect { subs ->
                subCategoryAdapter = SubCategoryAdapter(this@EditProductActivity, subs)
                binding.etSubCategory.setAdapter(subCategoryAdapter)
                // ch·ªçn subcategory tr√πng product id
                val match = subs.firstOrNull { it.id == currentProduct.sub_category_id }
                if (match != null) {
                    selectedSubCategory = match
                    binding.etSubCategory.setText(match.name, false)
                }
            }
        }
        lifecycleScope.launch {
            viewModel.errorMessage.collect { msg ->
                if (!msg.isNullOrEmpty()) {
                    Toast.makeText(this@EditProductActivity, msg, Toast.LENGTH_LONG).show()
                    // clear after show
                    viewModel.clearErrorMessage()
                }
            }
        }
        
        // ‚úÖ Observe edit product state
        lifecycleScope.launch {
            viewModel.addProductState.collect { state ->
                when (state) {
                    is AddProductUiState.Loading -> {
                        binding.btnNext.isEnabled = false
                        binding.btnNext.text = "ƒêang l∆∞u..."
                    }
                    is AddProductUiState.Success -> {
                        binding.btnNext.isEnabled = true
                        binding.btnNext.text = "Ti·∫øp"
                        Toast.makeText(this@EditProductActivity, "‚úÖ L∆∞u s·∫£n ph·∫©m th√†nh c√¥ng!", Toast.LENGTH_SHORT).show()
                        
                        // ‚úÖ Chuy·ªÉn sang EditProductVariantActivity
                        val intent = EditProductVariantActivity.createIntent(
                            context = this@EditProductActivity,
                            productId = currentProduct.product_id
                        )
                        startActivity(intent)
                        finish() // ƒê√≥ng EditProductActivity
                    }
                    is AddProductUiState.Error -> {
                        binding.btnNext.isEnabled = true
                        binding.btnNext.text = "Ti·∫øp"
                        Toast.makeText(this@EditProductActivity, "‚ùå ${state.message}", Toast.LENGTH_LONG).show()
                    }
                    else -> {
                        binding.btnNext.isEnabled = true
                        binding.btnNext.text = "Ti·∫øp"
                    }
                }
            }
        }
    }



    /** G·ªçi API l∆∞u s·∫£n ph·∫©m */
//    private fun saveProduct(original: Product) {
//        val name = binding.etName.text?.toString()?.trim() ?: ""
//        val description = binding.etDescription.text?.toString()?.trim() ?: ""
//        val priceText = binding.etPrice.text?.toString()?.trim() ?: "0"
//        val price = priceText.toDoubleOrNull() ?: 0.0
//
//        // TODO: Call ProductRepository.updateProduct(...)
//        // C√≥ th·ªÉ upload ·∫£nh n·∫øu selectedCoverUri != null
//
//        Toast.makeText(this, "ƒê√£ l∆∞u thay ƒë·ªïi (demo)", Toast.LENGTH_SHORT).show()
//        finish()
//    }
}