package com.example.greenbuyapp.ui.admin.approve.product

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.greenbuyapp.data.product.model.Product
import com.example.greenbuyapp.domain.product.ProductRepository
import com.example.greenbuyapp.util.Result
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

class ApproveProductViewModel(
    private val productRepository: ProductRepository
) : ViewModel() {

    // Danh s√°ch s·∫£n ph·∫©m ch∆∞a duy·ªát
    private val _pendingProducts = MutableStateFlow<List<Product>>(emptyList())
    val pendingProducts: StateFlow<List<Product>> = _pendingProducts.asStateFlow()

    // S·∫£n ph·∫©m hi·ªán t·∫°i ƒëang xem
    private val _currentProduct = MutableStateFlow<Product?>(null)
    val currentProduct: StateFlow<Product?> = _currentProduct.asStateFlow()

    // Index c·ªßa s·∫£n ph·∫©m hi·ªán t·∫°i
    private val _currentIndex = MutableStateFlow(0)
    val currentIndex: StateFlow<Int> = _currentIndex.asStateFlow()

    // Tr·∫°ng th√°i loading
    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()

    // Th√¥ng b√°o l·ªói
    private val _errorMessage = MutableStateFlow<String?>(null)
    val errorMessage: StateFlow<String?> = _errorMessage.asStateFlow()

    // Tr·∫°ng th√°i duy·ªát
    private val _approvalState = MutableStateFlow<ApprovalState>(ApprovalState.Idle)
    val approvalState: StateFlow<ApprovalState> = _approvalState.asStateFlow()

    // Th·ªëng k√™
    private val _stats = MutableStateFlow(ApprovalStats())
    val stats: StateFlow<ApprovalStats> = _stats.asStateFlow()

    init {
        loadPendingProducts()
    }

    /**
     * Load danh s√°ch s·∫£n ph·∫©m ch∆∞a duy·ªát
     */
    fun loadPendingProducts() {
        viewModelScope.launch {
            try {
                _isLoading.value = true
                _errorMessage.value = null

                when (val result = productRepository.getProducts(
                    page = 1,
                    limit = 50, // Load nhi·ªÅu s·∫£n ph·∫©m m·ªôt l·∫ßn
                    approvedOnly = false // Ch·ªâ l·∫•y s·∫£n ph·∫©m ch∆∞a duy·ªát
                )) {
                    is Result.Success -> {
                        val allProducts = result.value.items
                        // Filter ch·ªâ l·∫•y s·∫£n ph·∫©m ch∆∞a duy·ªát
                        val pendingProducts = allProducts.filter { !it.isApproved }
                        _pendingProducts.value = pendingProducts
                        
                        if (pendingProducts.isNotEmpty()) {
                            _currentProduct.value = pendingProducts[0]
                            _currentIndex.value = 0
                        }
                        
                        println("‚úÖ Loaded ${pendingProducts.size} pending products from ${allProducts.size} total")
                    }
                    is Result.Error -> {
                        val errorMsg = "L·ªói t·∫£i danh s√°ch s·∫£n ph·∫©m: ${result.error}"
                        _errorMessage.value = errorMsg
                        println("‚ùå $errorMsg")
                    }
                    is Result.NetworkError -> {
                        val errorMsg = "L·ªói m·∫°ng, vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi"
                        _errorMessage.value = errorMsg
                        println("üåê $errorMsg")
                    }
                    is Result.Loading -> {
                        // ƒê√£ x·ª≠ l√Ω b·∫±ng _isLoading
                    }
                }
            } catch (e: Exception) {
                val errorMsg = "L·ªói kh√¥ng x√°c ƒë·ªãnh: ${e.message}"
                _errorMessage.value = errorMsg
                println("üí• $errorMsg")
            } finally {
                _isLoading.value = false
            }
        }
    }

    /**
     * Duy·ªát s·∫£n ph·∫©m (approve)
     */
    fun approveProduct(productId: Int, approvalNote: String = "ƒê√£ duy·ªát") {
        viewModelScope.launch {
            try {
                _approvalState.value = ApprovalState.Loading
                
                when (val result = productRepository.approveProduct(productId, approvalNote)) {
                    is Result.Success -> {
                        handleApprovalSuccess(true)
                    }
                    is Result.Error -> {
                        _errorMessage.value = "L·ªói duy·ªát s·∫£n ph·∫©m: ${result.error}"
                        _approvalState.value = ApprovalState.Error
                    }
                    is Result.NetworkError -> {
                        _errorMessage.value = "L·ªói m·∫°ng, vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi"
                        _approvalState.value = ApprovalState.Error
                    }
                    is Result.Loading -> {
                        // ƒê√£ x·ª≠ l√Ω b·∫±ng _approvalState
                    }
                }
                
            } catch (e: Exception) {
                _errorMessage.value = "L·ªói kh√¥ng x√°c ƒë·ªãnh: ${e.message}"
                _approvalState.value = ApprovalState.Error
            }
        }
    }

    /**
     * T·ª´ ch·ªëi s·∫£n ph·∫©m (reject)
     */
    fun rejectProduct(productId: Int, reason: String = "ƒê√£ t·ª´ ch·ªëi") {
        viewModelScope.launch {
            try {
                _approvalState.value = ApprovalState.Loading
                
                when (val result = productRepository.rejectProduct(productId, reason)) {
                    is Result.Success -> {
                        handleApprovalSuccess(false)
                    }
                    is Result.Error -> {
                        _errorMessage.value = "L·ªói t·ª´ ch·ªëi s·∫£n ph·∫©m: ${result.error}"
                        _approvalState.value = ApprovalState.Error
                    }
                    is Result.NetworkError -> {
                        _errorMessage.value = "L·ªói m·∫°ng, vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi"
                        _approvalState.value = ApprovalState.Error
                    }
                    is Result.Loading -> {
                        // ƒê√£ x·ª≠ l√Ω b·∫±ng _approvalState
                    }
                }
                
            } catch (e: Exception) {
                _errorMessage.value = "L·ªói kh√¥ng x√°c ƒë·ªãnh: ${e.message}"
                _approvalState.value = ApprovalState.Error
            }
        }
    }

    /**
     * X·ª≠ l√Ω khi duy·ªát/t·ª´ ch·ªëi th√†nh c√¥ng
     */
    private fun handleApprovalSuccess(isApproved: Boolean) {
        val currentProduct = _currentProduct.value
        if (currentProduct != null) {
            // C·∫≠p nh·∫≠t th·ªëng k√™
            if (isApproved) {
                _stats.value = _stats.value.copy(
                    approvedCount = _stats.value.approvedCount + 1
                )
            } else {
                _stats.value = _stats.value.copy(
                    rejectedCount = _stats.value.rejectedCount + 1
                )
            }
            
            // X√≥a s·∫£n ph·∫©m kh·ªèi danh s√°ch
            val updatedProducts = _pendingProducts.value.toMutableList()
            updatedProducts.removeAt(_currentIndex.value)
            _pendingProducts.value = updatedProducts
            
            // Chuy·ªÉn sang s·∫£n ph·∫©m ti·∫øp theo
            moveToNextProduct()
        }
        
        _approvalState.value = ApprovalState.Success(isApproved)
    }

    /**
     * Chuy·ªÉn sang s·∫£n ph·∫©m ti·∫øp theo
     */
    fun moveToNextProduct() {
        val currentIndex = _currentIndex.value
        val products = _pendingProducts.value
        
        if (currentIndex < products.size - 1) {
            _currentIndex.value = currentIndex + 1
            _currentProduct.value = products[currentIndex + 1]
        } else {
            // ƒê√£ xem h·∫øt s·∫£n ph·∫©m
            _currentProduct.value = null
            _currentIndex.value = 0
        }
    }

    /**
     * Chuy·ªÉn v·ªÅ s·∫£n ph·∫©m tr∆∞·ªõc ƒë√≥
     */
    fun moveToPreviousProduct() {
        val currentIndex = _currentIndex.value
        
        if (currentIndex > 0) {
            _currentIndex.value = currentIndex - 1
            _currentProduct.value = _pendingProducts.value[currentIndex - 1]
        }
    }

    /**
     * Clear error message
     */
    fun clearError() {
        _errorMessage.value = null
        _approvalState.value = ApprovalState.Idle
    }

    /**
     * Refresh danh s√°ch s·∫£n ph·∫©m
     */
    fun refresh() {
        loadPendingProducts()
    }
}

/**
 * Tr·∫°ng th√°i duy·ªát s·∫£n ph·∫©m
 */
sealed class ApprovalState {
    object Idle : ApprovalState()
    object Loading : ApprovalState()
    data class Success(val isApproved: Boolean) : ApprovalState()
    object Error : ApprovalState()
}

/**
 * Th·ªëng k√™ duy·ªát s·∫£n ph·∫©m
 */
data class ApprovalStats(
    val approvedCount: Int = 0,
    val rejectedCount: Int = 0
) {
    val totalProcessed: Int
        get() = approvedCount + rejectedCount
}