package com.example.greenbuyapp.domain.cart

import com.example.greenbuyapp.data.cart.CartService
import com.example.greenbuyapp.data.cart.model.*
import com.example.greenbuyapp.util.Result
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

class CartRepository(
    private val cartService: CartService
) {
    
    /**
     * L·∫•y danh s√°ch gi·ªè h√†ng
     */
    suspend fun getCart(): Result<List<CartShop>> = withContext(Dispatchers.IO) {
        try {
            val response = cartService.getCart()
            if (response.isSuccessful) {
                val cartShops = response.body() ?: emptyList()
                Result.Success(cartShops)
            } else {
                Result.Error(response.code(), "L·ªói l·∫•y gi·ªè h√†ng: ${response.message()}")
            }
        } catch (e: Exception) {
            Result.NetworkError
        }
    }
    
    /**
     * Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
     */
    suspend fun addToCart(attributeId: Int, quantity: Int): Result<AddToCartResponse> = withContext(Dispatchers.IO) {
        try {
            val request = AddToCartRequest(attributeId, quantity)
            val response = cartService.addToCart(request)
            if (response.isSuccessful) {
                val result = response.body()
                if (result != null) {
                    Result.Success(result)
                } else {
                    Result.Error(null, "Ph·∫£n h·ªìi r·ªóng t·ª´ server")
                }
            } else {
                Result.Error(response.code(), "L·ªói th√™m v√†o gi·ªè h√†ng: ${response.message()}")
            }
        } catch (e: Exception) {
            Result.NetworkError
        }
    }
    
    /**
     * Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng v·ªõi AddToCartRequest
     */
    suspend fun addToCart(request: AddToCartRequest): Result<AddToCartResponse> = withContext(Dispatchers.IO) {
        try {
            val response = cartService.addToCart(request)
            if (response.isSuccessful) {
                val result = response.body()
                if (result != null) {
                    Result.Success(result)
                } else {
                    Result.Error(null, "Ph·∫£n h·ªìi r·ªóng t·ª´ server")
                }
            } else {
                Result.Error(response.code(), "L·ªói th√™m v√†o gi·ªè h√†ng: ${response.message()}")
            }
        } catch (e: Exception) {
            Result.NetworkError
        }
    }
    
    /**
     * C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
     */
    suspend fun updateCartItem(attributeId: Int, quantity: Int): Result<UpdateCartResponse> = withContext(Dispatchers.IO) {
        try {
            val request = UpdateCartRequest(quantity)
            val response = cartService.updateCartItem(attributeId, request)
            if (response.isSuccessful) {
                val result = response.body()
                if (result != null) {
                    Result.Success(result)
                } else {
                    Result.Error(null, "Ph·∫£n h·ªìi r·ªóng t·ª´ server")
                }
            } else {
                Result.Error(response.code(), "L·ªói c·∫≠p nh·∫≠t gi·ªè h√†ng: ${response.message()}")
            }
        } catch (e: Exception) {
            Result.NetworkError
        }
    }
    
    /**
     * X√≥a to√†n b·ªô shop kh·ªèi gi·ªè h√†ng
     */
    suspend fun deleteShopFromCart(shopId: Int): Result<DeleteCartShopResponse> = withContext(Dispatchers.IO) {
        try {
            val response = cartService.deleteShopFromCart(shopId)
            if (response.isSuccessful) {
                val result = response.body()
                if (result != null) {
                    Result.Success(result)
                } else {
                    Result.Error(null, "Ph·∫£n h·ªìi r·ªóng t·ª´ server")
                }
            } else {
                Result.Error(response.code(), "L·ªói x√≥a shop: ${response.message()}")
            }
        } catch (e: Exception) {
            Result.NetworkError
        }
    }
    
    /**
     * X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
     */
    suspend fun deleteCartItem(attributeId: Int): Result<DeleteCartItemResponse> = withContext(Dispatchers.IO) {
        try {
            val response = cartService.deleteCartItem(attributeId)
            if (response.isSuccessful) {
                val result = response.body()
                if (result != null) {
                    Result.Success(result)
                } else {
                    Result.Error(null, "Ph·∫£n h·ªìi r·ªóng t·ª´ server")
                }
            } else {
                Result.Error(response.code(), "L·ªói x√≥a s·∫£n ph·∫©m: ${response.message()}")
            }
        } catch (e: Exception) {
            Result.NetworkError
        }
    }

    /**
     * Validate d·ªØ li·ªáu order tr∆∞·ªõc khi g·ª≠i request
     */
    private fun validateOrderData(
        cartShop: CartShop,
        shippingAddress: String,
        phoneNumber: String,
        recipientName: String,
        billingAddress: String
    ): String? {
        return when {
            cartShop.items.isEmpty() -> "Gi·ªè h√†ng tr·ªëng"
            shippingAddress.isBlank() -> "ƒê·ªãa ch·ªâ giao h√†ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"
            shippingAddress.length < 10 -> "ƒê·ªãa ch·ªâ giao h√†ng qu√° ng·∫Øn (c·∫ßn √≠t nh·∫•t 10 k√Ω t·ª±)"
            shippingAddress.matches(Regex("^[a-zA-Z]*$")) -> "ƒê·ªãa ch·ªâ giao h√†ng kh√¥ng h·ª£p l·ªá - vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ th·ª±c"
            phoneNumber.isBlank() -> "S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"
            !phoneNumber.matches(Regex("^[0-9+\\-\\s()]+$")) -> "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá"
            recipientName.isBlank() -> "T√™n ng∆∞·ªùi nh·∫≠n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"
            recipientName.length < 2 -> "T√™n ng∆∞·ªùi nh·∫≠n qu√° ng·∫Øn"
            billingAddress.isBlank() -> "ƒê·ªãa ch·ªâ thanh to√°n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"
            billingAddress.length < 10 -> "ƒê·ªãa ch·ªâ thanh to√°n qu√° ng·∫Øn (c·∫ßn √≠t nh·∫•t 10 k√Ω t·ª±)"
            billingAddress.matches(Regex("^[a-zA-Z]*$")) -> "ƒê·ªãa ch·ªâ thanh to√°n kh√¥ng h·ª£p l·ªá - vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ th·ª±c"
            cartShop.items.any { it.quantity <= 0 } -> "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m ph·∫£i l·ªõn h∆°n 0"
            cartShop.items.any { it.productId <= 0 } -> "ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá"
            cartShop.items.any { it.attributeId <= 0 } -> "ID thu·ªôc t√≠nh kh√¥ng h·ª£p l·ªá"
            else -> null
        }
    }

suspend fun placeOrderAndPay(
    cartShop: CartShop,
    shippingAddress: String,
    phoneNumber: String,
    recipientName: String,
    deliveryNotes: String,
    billingAddress: String
): Result<PaymentResponse> = withContext(Dispatchers.IO) {
    try {
        // Validate d·ªØ li·ªáu tr∆∞·ªõc khi g·ª≠i request
        val validationError = validateOrderData(cartShop, shippingAddress, phoneNumber, recipientName, billingAddress)
        if (validationError != null) {
            println("‚ùå Validation error: $validationError")
            return@withContext Result.Error(400, validationError)
        }

        // 1. T·∫°o order
        val orderItems = cartShop.items.map {
            OrderItemRequest(
                product_id = it.productId,
                attribute_id = it.attributeId,
                quantity = it.quantity
            )
        }
        val orderRequest = OrderRequest(
            items = orderItems,
            shipping_address = shippingAddress,
            phone_number = phoneNumber,
            recipient_name = recipientName,
            delivery_notes = deliveryNotes,
            billing_address = billingAddress
        )
        
        println("üì§ Creating order with request: $orderRequest")
        val orderResponse = cartService.createOrder(orderRequest)
        println("‚úÖ Order created successfully with ID: ${orderResponse.id}")

        // 2. Thanh to√°n
        val paymentRequest = PaymentRequest() // gi·ªØ nguy√™n nh∆∞ b·∫°n y√™u c·∫ßu
        val paymentResponse = cartService.processPayment(orderResponse.id, paymentRequest)
        println("‚úÖ Payment processed successfully")

        Result.Success(paymentResponse)
    } catch (e: retrofit2.HttpException) {
        val errorCode = e.code()
        val errorBody = try {
            e.response()?.errorBody()?.string()
        } catch (ex: Exception) {
            null
        }
        
        println("‚ùå HTTP Error $errorCode: $errorBody")
        
        val errorMessage = when (errorCode) {
            422 -> {
                if (errorBody != null) {
                    "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: $errorBody"
                } else {
                    "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá - Vui l√≤ng ki·ªÉm tra th√¥ng tin ƒë∆°n h√†ng"
                }
            }
            400 -> "Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá"
            401 -> "Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i"
            403 -> "Kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán"
            404 -> "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i"
            500 -> "L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau"
            else -> errorBody ?: "L·ªói t·∫°o ƒë∆°n h√†ng: ${e.message}"
        }
        
        Result.Error(errorCode, errorMessage)
    } catch (e: java.io.IOException) {
        println("‚ùå Network Error: ${e.message}")
        Result.NetworkError
    } catch (e: Exception) {
        println("‚ùå Unknown Error: ${e.message}")
        Result.Error(null, "L·ªói kh√¥ng x√°c ƒë·ªãnh: ${e.message}")
    }
}
} 